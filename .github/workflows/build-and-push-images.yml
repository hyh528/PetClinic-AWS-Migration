name: 서비스 이미지 빌드 및 배포

on:
   push:
     paths:
       - 'spring-petclinic-*/**'
       - '.github/workflows/build-and-push-images.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_REGION: ap-southeast-2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: 모든 서비스 빌드
        run: |
          echo "🔄 모든 서비스 빌드 중..."
          ./mvnw clean package -DskipTests -q -f spring-petclinic-customers-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-vets-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-visits-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-admin-server/pom.xml
          echo "✅ 모든 서비스 빌드 완료"

      - name: customers-service 빌드 및 푸시
        run: |
          echo "🔄 customers-service 빌드 및 푸시 중..."
          # 이미지가 이미 존재하는지 확인
          if aws ecr describe-images --repository-name petclinic-dev-customers --image-ids imageTag=latest --region ap-southeast-2 >/dev/null 2>&1; then
            echo "✅ customers-service 이미지가 이미 존재합니다. 건너뜁니다."
          else
            # 태그 생성
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            DATE_TAG=$(date +%Y-%m-%d)
            COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

            cp spring-petclinic-customers-service/target/spring-petclinic-customers-service-*.jar spring-petclinic-customers-service/app.jar
            cd spring-petclinic-customers-service
            docker build -t customers-service .

            # 여러 태그 적용
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${{ github.sha }}
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${SHORT_SHA}
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${BRANCH_NAME}
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${DATE_TAG}
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${COMBINED_TAG}
            docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest

            # 푸시
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${{ github.sha }}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${SHORT_SHA}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${BRANCH_NAME}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${DATE_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${COMBINED_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest
            echo "✅ customers-service 푸시 완료 (태그: ${{ github.sha }}, ${SHORT_SHA}, ${BRANCH_NAME}, ${DATE_TAG}, ${COMBINED_TAG}, latest)"
          fi

      - name: vets-service 빌드 및 푸시
        run: |
          echo "🔄 vets-service 빌드 및 푸시 중..."
          if aws ecr describe-images --repository-name petclinic-dev-vets --image-ids imageTag=latest --region ap-southeast-2 >/dev/null 2>&1; then
            echo "✅ vets-service 이미지가 이미 존재합니다. 건너뜁니다."
          else
            # 태그 생성
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            DATE_TAG=$(date +%Y-%m-%d)
            COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

            cp spring-petclinic-vets-service/target/spring-petclinic-vets-service-*.jar spring-petclinic-vets-service/app.jar
            cd spring-petclinic-vets-service
            docker build -t vets-service .

            # 여러 태그 적용
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${{ github.sha }}
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${SHORT_SHA}
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${BRANCH_NAME}
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${DATE_TAG}
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${COMBINED_TAG}
            docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest

            # 푸시
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${{ github.sha }}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${SHORT_SHA}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${BRANCH_NAME}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${DATE_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${COMBINED_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest
            echo "✅ vets-service 푸시 완료 (태그: ${{ github.sha }}, ${SHORT_SHA}, ${BRANCH_NAME}, ${DATE_TAG}, ${COMBINED_TAG}, latest)"
          fi

      - name: visits-service 빌드 및 푸시
        run: |
          echo "🔄 visits-service 빌드 및 푸시 중..."
          if aws ecr describe-images --repository-name petclinic-dev-visits --image-ids imageTag=latest --region ap-southeast-2 >/dev/null 2>&1; then
            echo "✅ visits-service 이미지가 이미 존재합니다. 건너뜁니다."
          else
            # 태그 생성
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            DATE_TAG=$(date +%Y-%m-%d)
            COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

            cp spring-petclinic-visits-service/target/spring-petclinic-visits-service-*.jar spring-petclinic-visits-service/app.jar
            cd spring-petclinic-visits-service
            docker build -t visits-service .

            # 여러 태그 적용
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${{ github.sha }}
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${SHORT_SHA}
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${BRANCH_NAME}
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${DATE_TAG}
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${COMBINED_TAG}
            docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest

            # 푸시
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${{ github.sha }}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${SHORT_SHA}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${BRANCH_NAME}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${DATE_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${COMBINED_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest
            echo "✅ visits-service 푸시 완료 (태그: ${{ github.sha }}, ${SHORT_SHA}, ${BRANCH_NAME}, ${DATE_TAG}, ${COMBINED_TAG}, latest)"
          fi

      - name: admin-server 빌드 및 푸시
        run: |
          echo "🔄 admin-server 빌드 및 푸시 중..."
          if aws ecr describe-images --repository-name petclinic-dev-admin --image-ids imageTag=latest --region ap-southeast-2 >/dev/null 2>&1; then
            echo "✅ admin-server 이미지가 이미 존재합니다. 건너뜁니다."
          else
            # 태그 생성
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            DATE_TAG=$(date +%Y-%m-%d)
            COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

            cp spring-petclinic-admin-server/target/spring-petclinic-admin-server-*.jar spring-petclinic-admin-server/app.jar
            cd spring-petclinic-admin-server
            docker build -t admin-server .

            # 여러 태그 적용
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${{ github.sha }}
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${SHORT_SHA}
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${BRANCH_NAME}
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${DATE_TAG}
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${COMBINED_TAG}
            docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest

            # 푸시
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${{ github.sha }}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${SHORT_SHA}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${BRANCH_NAME}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${DATE_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${COMBINED_TAG}
            docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest
            echo "✅ admin-server 푸시 완료 (태그: ${{ github.sha }}, ${SHORT_SHA}, ${BRANCH_NAME}, ${DATE_TAG}, ${COMBINED_TAG}, latest)"
          fi


      - name: 이미지 매핑 아티팩트 생성
        run: |
          # Terraform 변수 `service_image_map`에 필요한 이미지 URI 매핑
          echo "customers-service=${{ env.ECR_REGISTRY }}/petclinic-dev-customers@${{ github.sha }}" >> images.properties
          echo "vets-service=${{ env.ECR_REGISTRY }}/petclinic-dev-vets@${{ github.sha }}" >> images.properties
          echo "visits-service=${{ env.ECR_REGISTRY }}/petclinic-dev-visits@${{ github.sha }}" >> images.properties
          echo "admin-server=${{ env.ECR_REGISTRY }}/petclinic-dev-admin@${{ github.sha }}" >> images.properties
        shell: bash

      - name: 이미지 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: images.properties

      # - name: Terraform 설치
      #   uses: hashicorp/setup-terraform@v3

      # - name: ECS에 배포
      #   run: |
      #     echo "🚀 ECS에 배포 중..."

      #     # Terraform 설정 (프로필 사용 안 함)
      #     cd terraform/layers/07-application
      #     terraform init -backend-config=backend.config -backend-config=../../backend.hcl -reconfigure

      #     # 최신 이미지로 배포 (프로필 변수 무시)
      #     terraform apply -auto-approve -var-file=../../envs/dev.tfvars \
      #       -var="aws_profile=" \
      #       -var="service_image_map={
      #         customers-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest\"
      #         vets-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest\"
      #         visits-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest\"
      #         admin-server = \"${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest\"
      #       }"

      #     echo "✅ 배포 완료"
      #   env:
      #     AWS_PROFILE: ""
