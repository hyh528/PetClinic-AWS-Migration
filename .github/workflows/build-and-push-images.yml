name: 서비스 이미지 빌드 및 배포

on:
   push:
     paths:
       - 'spring-petclinic-*/**'
       - '.github/workflows/build-and-push-images.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_REGION: ap-southeast-2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: 모든 서비스 빌드
        run: |
          echo "🔄 모든 서비스 빌드 중..."
          ./mvnw clean package -DskipTests -q -f spring-petclinic-customers-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-vets-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-visits-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-admin-server/pom.xml
          echo "✅ 모든 서비스 빌드 완료"

      - name: customers-service 빌드 및 푸시
        run: |
          echo "🔄 customers-service 빌드 및 푸시 중..."
          # 태그 생성
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          cp spring-petclinic-customers-service/target/spring-petclinic-customers-service-*.jar spring-petclinic-customers-service/app.jar
          cd spring-petclinic-customers-service
          docker build -t customers-service .

          # 불변 태그 적용
          docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${COMBINED_TAG}

          # 푸시 (불변 태그만 사용)
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${COMBINED_TAG}
          echo "✅ customers-service 푸시 완료 (태그: ${COMBINED_TAG})"

      - name: vets-service 빌드 및 푸시
        run: |
          echo "🔄 vets-service 빌드 및 푸시 중..."
          # 태그 생성
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          cp spring-petclinic-vets-service/target/spring-petclinic-vets-service-*.jar spring-petclinic-vets-service/app.jar
          cd spring-petclinic-vets-service
          docker build -t vets-service .

          # 불변 태그 적용
          docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${COMBINED_TAG}

          # 푸시 (불변 태그만 사용)
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${COMBINED_TAG}
          echo "✅ vets-service 푸시 완료 (태그: ${COMBINED_TAG})"

      - name: visits-service 빌드 및 푸시
        run: |
          echo "🔄 visits-service 빌드 및 푸시 중..."
          # 태그 생성
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          cp spring-petclinic-visits-service/target/spring-petclinic-visits-service-*.jar spring-petclinic-visits-service/app.jar
          cd spring-petclinic-visits-service
          docker build -t visits-service .

          # 불변 태그 적용
          docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${COMBINED_TAG}

          # 푸시 (불변 태그만 사용)
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${COMBINED_TAG}
          echo "✅ visits-service 푸시 완료 (태그: ${COMBINED_TAG})"

      - name: admin-server 빌드 및 푸시
        run: |
          echo "🔄 admin-server 빌드 및 푸시 중..."
          # 태그 생성
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          cp spring-petclinic-admin-server/target/spring-petclinic-admin-server-*.jar spring-petclinic-admin-server/app.jar
          cd spring-petclinic-admin-server
          docker build -t admin-server .

          # 불변 태그 적용
          docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${COMBINED_TAG}

          # 푸시 (불변 태그만 사용)
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${COMBINED_TAG}
          echo "✅ admin-server 푸시 완료 (태그: ${COMBINED_TAG})"


      - name: 이미지 매핑 아티팩트 생성
        run: |
          # Terraform 변수 `service_image_map`에 필요한 이미지 URI 매핑
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          COMBINED_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          # SHA256 다이제스트 조회 및 저장
          CUSTOMERS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-customers --image-ids imageTag=${COMBINED_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          VETS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-vets --image-ids imageTag=${COMBINED_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          VISITS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-visits --image-ids imageTag=${COMBINED_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          ADMIN_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-admin --image-ids imageTag=${COMBINED_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)

          echo "customers=${{ env.ECR_REGISTRY }}/petclinic-dev-customers@${CUSTOMERS_DIGEST}" >> images.properties
          echo "vets=${{ env.ECR_REGISTRY }}/petclinic-dev-vets@${VETS_DIGEST}" >> images.properties
          echo "visits=${{ env.ECR_REGISTRY }}/petclinic-dev-visits@${VISITS_DIGEST}" >> images.properties
          echo "admin=${{ env.ECR_REGISTRY }}/petclinic-dev-admin@${ADMIN_DIGEST}" >> images.properties
        shell: bash

      - name: 이미지 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: images.properties

      - name: Application Layer 배포 정보 생성
        run: |
          echo "📝 Application Layer 배포 정보 생성..."

          # 이미지 태그 생성 (CI 워크플로우와 동일)
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE_TAG=$(date +%Y-%m-%d)
          IMAGE_TAG="${BRANCH_NAME}-${DATE_TAG}-${SHORT_SHA}"

          # SHA256 다이제스트 조회 및 환경변수 설정
          CUSTOMERS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-customers --image-ids imageTag=${IMAGE_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          VETS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-vets --image-ids imageTag=${IMAGE_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          VISITS_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-visits --image-ids imageTag=${IMAGE_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)
          ADMIN_DIGEST=$(aws ecr describe-images --repository-name petclinic-dev-admin --image-ids imageTag=${IMAGE_TAG} --region ap-southeast-2 --query 'imageDetails[0].imageDigest' --output text)

          echo "SERVICE_IMAGE_MAP=customers=\"${{ env.ECR_REGISTRY }}/petclinic-dev-customers@${CUSTOMERS_DIGEST}\",vets=\"${{ env.ECR_REGISTRY }}/petclinic-dev-vets@${VETS_DIGEST}\",visits=\"${{ env.ECR_REGISTRY }}/petclinic-dev-visits@${VISITS_DIGEST}\",admin=\"${{ env.ECR_REGISTRY }}/petclinic-dev-admin@${ADMIN_DIGEST}\"" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          echo "✅ 배포 정보 생성 완료"
          echo "이미지 태그: ${IMAGE_TAG}"

      - name: Application Layer 배포 (수동)
        run: |
          echo "🚀 Application Layer 배포 준비 완료"
          echo "다음 명령어로 수동 배포하세요:"
          echo ""
          echo "cd terraform/layers/07-application"
          echo "terraform init -backend-config=\"../../backend.hcl\" -backend-config=\"backend.config\" -reconfigure"
          echo "TF_VAR_service_image_map='${SERVICE_IMAGE_MAP}' terraform plan -var-file=\"../../envs/dev.tfvars\""
          echo "TF_VAR_service_image_map='${SERVICE_IMAGE_MAP}' terraform apply -auto-approve -var-file=\"../../envs/dev.tfvars\""
          echo ""
          echo "또는 배포 스크립트 사용:"
          echo "./terraform/scripts/deploy-application.sh dev ${IMAGE_TAG}"
          echo ""
          echo "✅ GitHub Actions에서 빌드 및 이미지 푸시는 완료됨"
