name: Build and push service images

on:
  push:
    paths:
      - 'spring-petclinic-*/**'
      - '.github/workflows/build-and-push-images.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_REGION: ap-southeast-2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: 모든 서비스 빌드
        run: |
          echo "🔄 모든 서비스 빌드 중..."
          ./mvnw clean package -DskipTests -q -f spring-petclinic-customers-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-vets-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-visits-service/pom.xml
          ./mvnw clean package -DskipTests -q -f spring-petclinic-admin-server/pom.xml
          echo "✅ 모든 서비스 빌드 완료"

      - name: customers-service 빌드 및 푸시
        run: |
          echo "🔄 customers-service 빌드 및 푸시 중..."
          cp spring-petclinic-customers-service/target/spring-petclinic-customers-service-*.jar spring-petclinic-customers-service/app.jar
          cd spring-petclinic-customers-service
          docker build -t customers-service .
          docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${{ github.sha }}
          docker tag customers-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest
          echo "✅ customers-service 푸시 완료"

      - name: vets-service 빌드 및 푸시
        run: |
          echo "🔄 vets-service 빌드 및 푸시 중..."
          cp spring-petclinic-vets-service/target/spring-petclinic-vets-service-*.jar spring-petclinic-vets-service/app.jar
          cd spring-petclinic-vets-service
          docker build -t vets-service .
          docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${{ github.sha }}
          docker tag vets-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest
          echo "✅ vets-service 푸시 완료"

      - name: visits-service 빌드 및 푸시
        run: |
          echo "🔄 visits-service 빌드 및 푸시 중..."
          cp spring-petclinic-visits-service/target/spring-petclinic-visits-service-*.jar spring-petclinic-visits-service/app.jar
          cd spring-petclinic-visits-service
          docker build -t visits-service .
          docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${{ github.sha }}
          docker tag visits-service:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest
          echo "✅ visits-service 푸시 완료"

      - name: admin-server 빌드 및 푸시
        run: |
          echo "🔄 admin-server 빌드 및 푸시 중..."
          cp spring-petclinic-admin-server/target/spring-petclinic-admin-server-*.jar spring-petclinic-admin-server/app.jar
          cd spring-petclinic-admin-server
          docker build -t admin-server .
          docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${{ github.sha }}
          docker tag admin-server:latest ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest
          echo "✅ admin-server 푸시 완료"


      - name: 이미지 매핑 아티팩트 생성
        run: |
          # Terraform 변수 `service_image_map`에 필요한 이미지 URI 매핑
          echo "customers-service=${{ env.ECR_REGISTRY }}/petclinic-dev-customers@${{ github.sha }}" >> images.properties
          echo "vets-service=${{ env.ECR_REGISTRY }}/petclinic-dev-vets@${{ github.sha }}" >> images.properties
          echo "visits-service=${{ env.ECR_REGISTRY }}/petclinic-dev-visits@${{ github.sha }}" >> images.properties
          echo "admin-server=${{ env.ECR_REGISTRY }}/petclinic-dev-admin@${{ github.sha }}" >> images.properties
        shell: bash

      - name: 이미지 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: images.properties

      - name: Terraform 설치
        uses: hashicorp/setup-terraform@v3

      - name: ECS에 배포
        run: |
          echo "🚀 ECS에 배포 중..."

          # Terraform 설정
          cd terraform/layers/07-application
          terraform init -backend-config=backend.config -reconfigure

          # 최신 이미지로 배포
          terraform apply -auto-approve -var-file=../../envs/dev.tfvars \
            -var="service_image_map={
              customers-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-customers:latest\"
              vets-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-vets:latest\"
              visits-service = \"${{ env.ECR_REGISTRY }}/petclinic-dev-visits:latest\"
              admin-server = \"${{ env.ECR_REGISTRY }}/petclinic-dev-admin:latest\"
            }"

          echo "✅ 배포 완료"
