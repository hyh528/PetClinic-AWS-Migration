name: Deploy to Dev Environment

# Trigger workflow manually
on:
  push:
    branches: [ develop ]
    paths:
      - 'spring-petclinic-*/**'
      - 'terraform/layers/07-application/**'
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ap-southeast-2

    - name: Build and push Docker images
      run: |
        echo "üîÑ Building and pushing Docker images..."

        # ECR Î°úÍ∑∏Ïù∏
        aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

        # ÏÑúÎπÑÏä§ Î™©Î°ù
        services=(
          "spring-petclinic-customers-service:customers"
          "spring-petclinic-vets-service:vets"
          "spring-petclinic-visits-service:visits"
          "spring-petclinic-admin-server:admin"
        )

        for service_pair in "${services[@]}"; do
          service_dir="${service_pair%%:*}"
          service_name="${service_pair##*:}"

          echo "üì¶ Building $service_dir..."

          cd "$service_dir"

          # Maven ÎπåÎìú (ÌÖåÏä§Ìä∏ Ìè¨Ìï®)
          mvn clean package -q

          # Docker ÎπåÎìú
          docker build -t "$service_name" .

          # ECR Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ URL
          ecr_repo="${{ secrets.ECR_REGISTRY }}/petclinic-dev-$service_name"

          # ÌÉúÍ∑∏ Î∞è Ìë∏Ïãú
          docker tag "$service_name:latest" "$ecr_repo:latest"
          docker push "$ecr_repo:latest"

          echo "‚úÖ Pushed $service_name to $ecr_repo"

          cd ..
        done

    - name: Get image digests
      id: images
      run: |
        echo "üîç Getting latest image digests..."

        echo "customers_digest=$(aws ecr describe-images --repository-name petclinic-dev-customers --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)" >> $GITHUB_OUTPUT
        echo "vets_digest=$(aws ecr describe-images --repository-name petclinic-dev-vets --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)" >> $GITHUB_OUTPUT
        echo "visits_digest=$(aws ecr describe-images --repository-name petclinic-dev-visits --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)" >> $GITHUB_OUTPUT
        echo "admin_digest=$(aws ecr describe-images --repository-name petclinic-dev-admin --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      working-directory: terraform/layers/07-application
      run: terraform init -backend-config=backend.config -reconfigure

    - name: Terraform Plan
      working-directory: terraform/layers/07-application
      run: |
        terraform plan -var-file=../../envs/dev.tfvars \
          -var="service_image_map={
            customers = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-customers@${{ steps.images.outputs.customers_digest }}\"
            vets = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-vets@${{ steps.images.outputs.vets_digest }}\"
            visits = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-visits@${{ steps.images.outputs.visits_digest }}\"
            admin = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-admin@${{ steps.images.outputs.admin_digest }}\"
          }"

    - name: Terraform Apply
      id: apply
      working-directory: terraform/layers/07-application
      run: |
        terraform apply -auto-approve -var-file=../../envs/dev.tfvars \
          -var="service_image_map={
            customers = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-customers@${{ steps.images.outputs.customers_digest }}\"
            vets = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-vets@${{ steps.images.outputs.vets_digest }}\"
            visits = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-visits@${{ steps.images.outputs.visits_digest }}\"
            admin = \"${{ secrets.ECR_REGISTRY }}/petclinic-dev-admin@${{ steps.images.outputs.admin_digest }}\"
          }"

    - name: Health Check
      run: |
        echo "üîç Performing health checks..."
        ALB_DNS=$(cd terraform/layers/07-application && terraform output -raw alb_dns_name)
        echo "ALB DNS: $ALB_DNS"

        # Wait for services to be ready
        for i in {1..30}; do
          echo "Health check attempt $i/30..."
          if curl -f -s "http://$ALB_DNS/actuator/health" > /dev/null 2>&1; then
            echo "‚úÖ All services are healthy!"
            exit 0
          fi
          sleep 10
        done

        echo "‚ùå Health check failed after 5 minutes"
        exit 1

    - name: Rollback on Failure
      if: failure() && steps.apply.outcome == 'success'
      run: |
        echo "üîÑ Rolling back deployment..."
        cd terraform/layers/07-application

        # Get previous task definition
        CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
        for service in customers vets visits admin; do
          SERVICE_NAME="petclinic-dev-$service"
          echo "Rolling back $SERVICE_NAME..."

          # Get current task definition ARN
          CURRENT_TASK_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)

          # Find previous task definition (assuming it's the second most recent)
          PREVIOUS_TASK_ARN=$(aws ecs list-task-definitions --family-prefix "petclinic-dev-$service" --sort DESC --max-items 2 --query 'taskDefinitionArns[1]' --output text)

          if [ "$PREVIOUS_TASK_ARN" != "None" ] && [ -n "$PREVIOUS_TASK_ARN" ]; then
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $PREVIOUS_TASK_ARN --force-new-deployment
            echo "‚úÖ Rolled back $SERVICE_NAME to $PREVIOUS_TASK_ARN"
          else
            echo "‚ö†Ô∏è No previous task definition found for $SERVICE_NAME"
          fi
        done

    - name: Send Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          MESSAGE="‚úÖ Deployment to Dev environment successful!"
        else
          MESSAGE="‚ùå Deployment to Dev environment failed!"
        fi

        # Send notification to Slack (if webhook configured)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi