# Spring Boot Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÎπåÎìú Î∞è Í∏∞Î≥∏ Í≤ÄÏ¶ù
# ÏÉÅÏÑ∏Ìïú Î∞∞Ìè¨Îäî application-deployment.yml ÏõåÌÅ¨ÌîåÎ°úÏö∞ÏóêÏÑú Ï≤òÎ¶¨

name: Java CI with Maven

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'spring-petclinic-*/**'
      - 'pom.xml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'spring-petclinic-*/**'
      - 'pom.xml'

env:
  JAVA_VERSION: '17'

jobs:
  # Í∏∞Î≥∏ ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏ (PR Í≤ÄÏ¶ùÏö©)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile
        run: |
          echo "üî® Compiling Spring Boot applications..."
          mvn clean compile -B

      - name: Run Tests
        run: |
          echo "üß™ Running unit tests..."
          mvn test -B

      - name: Generate Test Report
        if: always()
        run: |
          echo "üìä Test Results Summary"
          echo "======================="
          
          # Maven Surefire Î¶¨Ìè¨Ìä∏ ÌôïÏù∏
          if find . -name "TEST-*.xml" -type f | head -1 | grep -q .; then
            echo "‚úÖ Test reports generated"
            
            # Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ ÌÜµÍ≥Ñ
            TOTAL_TESTS=$(find . -name "TEST-*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            FAILED_TESTS=$(find . -name "TEST-*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            ERROR_TESTS=$(find . -name "TEST-*.xml" -exec grep -h "errors=" {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            
            echo "Total Tests: ${TOTAL_TESTS:-0}"
            echo "Failed Tests: ${FAILED_TESTS:-0}"
            echo "Error Tests: ${ERROR_TESTS:-0}"
            
            if [ "${FAILED_TESTS:-0}" -eq 0 ] && [ "${ERROR_TESTS:-0}" -eq 0 ]; then
              echo "üéâ All tests passed!"
            else
              echo "‚ùå Some tests failed"
            fi
          else
            echo "‚ö†Ô∏è No test reports found"
          fi

      - name: Build Docker Images (PR only)
        if: github.event_name == 'pull_request'
        run: |
          echo "üê≥ Building Docker images for validation..."
          mvn clean package -B -DskipTests -PbuildDocker
          
          echo "üìã Built images:"
          docker images | grep springcommunity/spring-petclinic || echo "No images found"

      - name: Validate Application Configuration
        run: |
          echo "üîç Validating application configurations..."
          
          # application.yml ÌååÏùº Í≤ÄÏ¶ù
          for service_dir in spring-petclinic-*/; do
            if [ -d "$service_dir" ]; then
              service_name=$(basename "$service_dir")
              config_file="$service_dir/src/main/resources/application.yml"
              
              if [ -f "$config_file" ]; then
                echo "‚úÖ $service_name: Configuration found"
                
                # YAML Î¨∏Î≤ï Í≤ÄÏ¶ù (Python ÏÇ¨Ïö©)
                python3 -c "
import yaml
import sys
try:
    with open('$config_file', 'r') as f:
        yaml.safe_load(f)
    print('‚úÖ $service_name: YAML syntax valid')
except Exception as e:
    print('‚ùå $service_name: YAML syntax error - ' + str(e))
    sys.exit(1)
" 2>/dev/null || echo "‚ö†Ô∏è $service_name: Could not validate YAML (Python not available)"
              else
                echo "‚ö†Ô∏è $service_name: No application.yml found"
              fi
            fi
          done

      - name: Security Scan (Dependency Check)
        run: |
          echo "üîí Running dependency security scan..."
          
          # Maven dependency check (if available)
          if mvn help:describe -Dplugin=org.owasp:dependency-check-maven -Ddetail=false -q; then
            echo "Running OWASP dependency check..."
            mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=8
          else
            echo "‚ö†Ô∏è OWASP dependency check plugin not configured"
          fi

      - name: Build Summary
        if: always()
        run: |
          echo "üìã Build Summary"
          echo "==============="
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Java Version: ${{ env.JAVA_VERSION }}"
          echo "Maven Version: $(mvn --version | head -n 1)"
          echo ""
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Build completed successfully!"
            
            if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo ""
              echo "üöÄ This push to main will trigger application deployment."
              echo "Check the 'Application Deployment' workflow for deployment status."
            fi
          else
            echo "‚ùå Build failed. Please check the logs above."
          fi
