name: Lambda Function Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/modules/lambda-genai/lambda_function.py'
      - 'terraform/modules/lambda-genai/requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/modules/lambda-genai/lambda_function.py'
      - 'terraform/modules/lambda-genai/requirements.txt'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: "ap-northeast-1"  # 도쿄 리전으로 변경
  PYTHON_VERSION: "3.11"

jobs:
  # Lambda 함수 코드 검증
  lambda-validate:
    name: Lambda Code Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        working-directory: terraform/modules/lambda-genai
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest flake8 black

      - name: Code Formatting Check
        working-directory: terraform/modules/lambda-genai
        run: |
          black --check lambda_function.py

      - name: Lint Code
        working-directory: terraform/modules/lambda-genai
        run: |
          flake8 lambda_function.py --max-line-length=88 --ignore=E203,W503

      - name: Run Unit Tests
        working-directory: terraform/modules/lambda-genai
        run: |
          if [ -f test_lambda_function.py ]; then
            pytest test_lambda_function.py -v
          else
            echo "No unit tests found, skipping..."
          fi

  # Lambda 함수 패키징 및 배포
  lambda-deploy:
    name: Lambda Function Deploy
    runs-on: ubuntu-latest
    needs: lambda-validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: https://console.aws.amazon.com/lambda/

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Package Lambda Function
        working-directory: terraform/modules/lambda-genai
        run: |
          echo "📦 Packaging Lambda function..."
          
          # 임시 디렉토리 생성
          mkdir -p lambda-package
          
          # 의존성 설치
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -t lambda-package/
          fi
          
          # Lambda 함수 코드 복사
          cp lambda_function.py lambda-package/
          
          # ZIP 파일 생성
          cd lambda-package
          zip -r ../lambda-function.zip .
          cd ..
          
          echo "✅ Lambda package created: lambda-function.zip"
          ls -la lambda-function.zip

      - name: Upload to S3
        working-directory: terraform/modules/lambda-genai
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          BUCKET_NAME="petclinic-lambda-artifacts-${ENVIRONMENT}"
          OBJECT_KEY="genai-service/lambda-function-${{ github.sha }}.zip"
          
          echo "📤 Uploading to S3: s3://${BUCKET_NAME}/${OBJECT_KEY}"
          
          # S3 버킷이 없으면 생성
          if ! aws s3 ls "s3://${BUCKET_NAME}" 2>/dev/null; then
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3 mb "s3://${BUCKET_NAME}" --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket "${BUCKET_NAME}" --versioning-configuration Status=Enabled
          fi
          
          # ZIP 파일 업로드
          aws s3 cp lambda-function.zip "s3://${BUCKET_NAME}/${OBJECT_KEY}"
          
          echo "S3_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV
          echo "S3_KEY=${OBJECT_KEY}" >> $GITHUB_ENV

      - name: Update Lambda Function
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          FUNCTION_NAME="petclinic-genai-service-${ENVIRONMENT}"
          
          echo "🔄 Updating Lambda function: ${FUNCTION_NAME}"
          
          # Lambda 함수 코드 업데이트
          aws lambda update-function-code \
            --function-name "${FUNCTION_NAME}" \
            --s3-bucket "${{ env.S3_BUCKET }}" \
            --s3-key "${{ env.S3_KEY }}" \
            --region ${{ env.AWS_REGION }}
          
          # 함수 업데이트 완료 대기
          echo "⏳ Waiting for function update to complete..."
          aws lambda wait function-updated \
            --function-name "${FUNCTION_NAME}" \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Lambda function updated successfully!"

      - name: Create Function Alias
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          FUNCTION_NAME="petclinic-genai-service-${ENVIRONMENT}"
          VERSION_DESCRIPTION="Deployed from commit ${{ github.sha }}"
          
          echo "🏷️ Creating new version and alias..."
          
          # 새 버전 생성
          VERSION_OUTPUT=$(aws lambda publish-version \
            --function-name "${FUNCTION_NAME}" \
            --description "${VERSION_DESCRIPTION}" \
            --region ${{ env.AWS_REGION }})
          
          VERSION_NUMBER=$(echo $VERSION_OUTPUT | jq -r '.Version')
          echo "📌 Created version: ${VERSION_NUMBER}"
          
          # LIVE 별칭 업데이트 (또는 생성)
          if aws lambda get-alias --function-name "${FUNCTION_NAME}" --name "LIVE" --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "🔄 Updating existing LIVE alias to version ${VERSION_NUMBER}"
            aws lambda update-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "LIVE" \
              --function-version "${VERSION_NUMBER}" \
              --description "Live version deployed from ${{ github.sha }}" \
              --region ${{ env.AWS_REGION }}
          else
            echo "🆕 Creating new LIVE alias for version ${VERSION_NUMBER}"
            aws lambda create-alias \
              --function-name "${FUNCTION_NAME}" \
              --name "LIVE" \
              --function-version "${VERSION_NUMBER}" \
              --description "Live version deployed from ${{ github.sha }}" \
              --region ${{ env.AWS_REGION }}
          fi
          
          echo "VERSION_NUMBER=${VERSION_NUMBER}" >> $GITHUB_ENV

      - name: Test Lambda Function
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          FUNCTION_NAME="petclinic-genai-service-${ENVIRONMENT}:LIVE"
          
          echo "🧪 Testing Lambda function..."
          
          # 테스트 페이로드 생성
          TEST_PAYLOAD='{
            "httpMethod": "POST",
            "path": "/api/genai/chat",
            "body": "{\"message\": \"Hello, this is a deployment test\"}",
            "headers": {
              "Content-Type": "application/json"
            }
          }'
          
          # Lambda 함수 호출
          RESPONSE=$(aws lambda invoke \
            --function-name "${FUNCTION_NAME}" \
            --payload "${TEST_PAYLOAD}" \
            --region ${{ env.AWS_REGION }} \
            response.json)
          
          # 응답 확인
          if [ $? -eq 0 ]; then
            echo "✅ Lambda function test successful!"
            echo "Response:"
            cat response.json | jq .
          else
            echo "❌ Lambda function test failed!"
            exit 1
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 Lambda Deployment Summary"
          echo "=============================="
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "Function: petclinic-genai-service-${{ github.event.inputs.environment || 'dev' }}"
          echo "Version: ${{ env.VERSION_NUMBER }}"
          echo "S3 Location: s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed at: $(date -u)"

  # 롤백 기능 (수동 실행만)
  lambda-rollback:
    name: Lambda Function Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: List Previous Versions
        run: |
          FUNCTION_NAME="petclinic-genai-service-${{ github.event.inputs.environment }}"
          
          echo "📋 Available versions for rollback:"
          aws lambda list-versions-by-function \
            --function-name "${FUNCTION_NAME}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Versions[?Version!=`$LATEST`].[Version,Description,LastModified]' \
            --output table

      - name: Rollback to Previous Version
        run: |
          FUNCTION_NAME="petclinic-genai-service-${{ github.event.inputs.environment }}"
          
          # 현재 LIVE 별칭이 가리키는 버전 확인
          CURRENT_VERSION=$(aws lambda get-alias \
            --function-name "${FUNCTION_NAME}" \
            --name "LIVE" \
            --region ${{ env.AWS_REGION }} \
            --query 'FunctionVersion' \
            --output text)
          
          echo "Current LIVE version: ${CURRENT_VERSION}"
          
          # 이전 버전 찾기 (현재 버전 - 1)
          PREVIOUS_VERSION=$((CURRENT_VERSION - 1))
          
          if [ ${PREVIOUS_VERSION} -lt 1 ]; then
            echo "❌ No previous version available for rollback"
            exit 1
          fi
          
          echo "🔄 Rolling back to version: ${PREVIOUS_VERSION}"
          
          # LIVE 별칭을 이전 버전으로 업데이트
          aws lambda update-alias \
            --function-name "${FUNCTION_NAME}" \
            --name "LIVE" \
            --function-version "${PREVIOUS_VERSION}" \
            --description "Rolled back from version ${CURRENT_VERSION}" \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Rollback completed successfully!"