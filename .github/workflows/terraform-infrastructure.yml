name: Terraform Infrastructure Deployment

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Target environment"
      action:
        required: true
        type: string
        description: "Terraform action (plan, apply, destroy)"
    outputs:
      deployment-status:
        description: "Deployment status"
        value: ${{ jobs.terraform-apply.outputs.status }}
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: "Terraform action"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "ap-northeast-1" # 도쿄 리전으로 변경

jobs:
  # Terraform 정적 검증 (모든 이벤트에서 실행)
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Terraform Validate All Modules
        run: |
          for module in terraform/modules/*/; do
            echo "Validating $module"
            cd "$module"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint Check
        run: |
          tflint --init
          tflint --recursive terraform/

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          # 개발 환경에서 허용되는 체크들 스킵
          skip_check: CKV_AWS_18,CKV_AWS_21,CKV_AWS_27,CKV_AWS_57,CKV_AWS_145,CKV_AWS_73,CKV_AWS_96,CKV_AWS_24,CKV_AWS_25
          quiet: false
          compact: false

  # Unit Tests (PR에서만 실행)
  unit-tests:
    name: Unit Tests
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/terraform-unit-tests.yml
    secrets: inherit

  # Terraform Plan (PR 또는 수동 실행 시)
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    strategy:
      matrix:
        environment: [dev]
        layer:
          - "01-network"
          - "02-security"
          - "03-database"
          - "04-parameter-store"
          - "05-cloud-map"
          - "06-lambda-genai"
          - "07-application"
          - "08-api-gateway"
          - "09-monitoring"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform/layers/${{ matrix.layer }}
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/layers/${{ matrix.layer }}
        run: |
          terraform plan -var-file=../../envs/${{ matrix.environment }}.tfvars -out=tfplan -no-color | tee plan.txt

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "terraform-plan-${{ matrix.environment }}-${{ matrix.layer }}"
          message: |
            ## 🏗️ Terraform Plan: `${{ matrix.environment }}/${{ matrix.layer }}`

            <details>
            <summary>📋 Plan Output</summary>

            ```terraform
            ${{ steps.plan.outputs.stdout }}
            ```
            </details>

            *Plan generated at: ${{ github.sha }}*

  # Terraform Apply (main 브랜치 푸시 또는 수동 실행 시)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') || (github.event_name == 'workflow_call' && inputs.action == 'apply')
    environment:
      name: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}
      url: https://console.aws.amazon.com/
    outputs:
      status: ${{ steps.apply-result.outputs.status }}

    strategy:
      matrix:
        include:
          - environment: dev
            layers:
              [
                "01-network",
                "02-security",
                "03-database",
                "04-parameter-store",
                "05-cloud-map",
                "06-lambda-genai",
                "07-application",
                "08-api-gateway",
                "09-monitoring",
              ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Apply Infrastructure Layers
        id: apply-result
        run: |
          ENVIRONMENT="${{ inputs.environment || github.event.inputs.environment || matrix.environment }}"
          echo "🚀 Starting infrastructure deployment for $ENVIRONMENT"

          # 레이어 배포 순서 (의존성 고려)
          layers=("01-network" "02-security" "03-database" "04-parameter-store" "05-cloud-map" "06-lambda-genai" "07-application" "08-api-gateway" "09-monitoring")

          for layer in "${layers[@]}"; do
            echo "=========================================="
            echo "🏗️ Deploying layer: $layer"
            echo "=========================================="
            
            cd terraform/layers/$layer
            
            # Terraform 초기화
            terraform init
            
            # Terraform 계획 확인
            terraform plan -var-file=../../envs/$ENVIRONMENT.tfvars -out=tfplan
            
            # Terraform 적용
            terraform apply -auto-approve tfplan
            
            if [ $? -eq 0 ]; then
              echo "✅ $layer deployed successfully"
            else
              echo "❌ $layer deployment failed"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            cd - > /dev/null
            echo ""
          done

          echo "🎉 All infrastructure layers deployed successfully!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Output Infrastructure Info
        run: |
          echo "📊 Infrastructure Deployment Summary"
          echo "Environment: ${{ matrix.environment }}"
          echo "Layers: ${{ join(matrix.layers, ', ') }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Commit: ${{ github.sha }}"

  # Terraform Destroy (수동 실행만)
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Infrastructure
        run: |
          echo "⚠️ DESTROYING infrastructure for ${{ github.event.inputs.environment }}"
          echo "This action is IRREVERSIBLE!"

          # 역순으로 레이어 제거
          layers=("09-monitoring" "08-api-gateway" "07-application" "06-lambda-genai" "05-cloud-map" "04-parameter-store" "03-database" "02-security" "01-network")

          for layer in "${layers[@]}"; do
            echo "🗑️ Destroying layer: $layer"
            cd terraform/envs/${{ github.event.inputs.environment }}/$layer
            terraform init
            terraform destroy -var-file=dev.tfvars -auto-approve
            cd - > /dev/null
          done
