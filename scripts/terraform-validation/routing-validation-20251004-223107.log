[0;34m[INFO][0m === VPC 및 서브넷 구성 검증 ===
[0;34m[INFO][0m VPC ID: vpc-mock123456
[0;34m[INFO][0m VPC CIDR: 10.0.0.0/16
[0;34m[INFO][0m IPv6 활성화: true
[0;32m[SUCCESS][0m VPC CIDR 검증 통과
[0;34m[INFO][0m 서브넷 개수 - Public: 2, Private App: 2, Private DB: 2
[0;32m[SUCCESS][0m Multi-AZ 서브넷 구성 검증 통과
[0;34m[INFO][0m === Internet Gateway 검증 ===
[0;34m[INFO][0m Internet Gateway ID: igw-mock123456
[0;32m[SUCCESS][0m Internet Gateway 상태 정상: available
[0;32m[SUCCESS][0m Internet Gateway VPC 연결 확인됨
[0;34m[INFO][0m === NAT Gateway 검증 ===
[0;34m[INFO][0m NAT Gateway 개수: 2
[0;32m[SUCCESS][0m 고가용성을 위한 NAT Gateway 구성 확인됨
[0;32m[SUCCESS][0m NAT Gateway nat-mock1 상태 정상: available
[0;32m[SUCCESS][0m NAT Gateway nat-mock1가 Public 서브넷에 올바르게 배치됨
[0;32m[SUCCESS][0m NAT Gateway nat-mock2 상태 정상: available
[0;32m[SUCCESS][0m NAT Gateway nat-mock2가 Public 서브넷에 올바르게 배치됨
[0;34m[INFO][0m === 라우팅 테이블 규칙 검증 ===
[0;34m[INFO][0m --- Public 라우팅 테이블 검증 ---
[0;34m[INFO][0m Public Route Table ID: rt-pub-mock
[0;32m[SUCCESS][0m Public 서브넷 기본 IPv4 경로 확인됨 (0.0.0.0/0 -> igw-mock123456)
[0;32m[SUCCESS][0m Public 서브넷 기본 IPv6 경로 확인됨 (::/0 -> igw-mock123456)
[0;34m[INFO][0m --- Private App 라우팅 테이블 검증 ---
[0;34m[INFO][0m Private App Route Table 0: rt-app-mock1
[0;32m[SUCCESS][0m Private App 서브넷 0 기본 IPv4 경로 확인됨 (0.0.0.0/0 -> nat-mock1)
[0;32m[SUCCESS][0m Private App 서브넷 0 기본 IPv6 경로 확인됨 (::/0 -> eigw-mock123456)
[0;34m[INFO][0m Private App Route Table 1: rt-app-mock2
[0;32m[SUCCESS][0m Private App 서브넷 1 기본 IPv4 경로 확인됨 (0.0.0.0/0 -> nat-mock2)
[0;32m[SUCCESS][0m Private App 서브넷 1 기본 IPv6 경로 확인됨 (::/0 -> eigw-mock123456)
[0;34m[INFO][0m --- Private DB 라우팅 테이블 검증 ---
[0;34m[INFO][0m Private DB Route Table 0: rt-db-mock1
[0;32m[SUCCESS][0m Private DB 서브넷 0 IPv4 기본 경로 없음 (보안 정책 준수)
[0;32m[SUCCESS][0m Private DB 서브넷 0 IPv6 아웃바운드 전용 경로 확인됨
[0;34m[INFO][0m Private DB Route Table 1: rt-db-mock2
[0;32m[SUCCESS][0m Private DB 서브넷 1 IPv4 기본 경로 없음 (보안 정책 준수)
[0;32m[SUCCESS][0m Private DB 서브넷 1 IPv6 아웃바운드 전용 경로 확인됨
[0;34m[INFO][0m === 서브넷-라우팅테이블 연결 검증 ===
[0;32m[SUCCESS][0m Public 서브넷 subnet-pub-mock1 라우팅 테이블 연결 확인됨
[0;32m[SUCCESS][0m Public 서브넷 subnet-pub-mock2 라우팅 테이블 연결 확인됨
[0;32m[SUCCESS][0m Private App 서브넷 subnet-app-mock1 라우팅 테이블 연결 확인됨
[0;32m[SUCCESS][0m Private App 서브넷 subnet-app-mock2 라우팅 테이블 연결 확인됨
[0;32m[SUCCESS][0m Private DB 서브넷 subnet-db-mock1 라우팅 테이블 연결 확인됨
[0;32m[SUCCESS][0m Private DB 서브넷 subnet-db-mock2 라우팅 테이블 연결 확인됨
[0;34m[INFO][0m === 라우팅 경로 추적 시뮬레이션 ===
[0;34m[INFO][0m 시나리오 1: Public 서브넷 -> 인터넷
[0;34m[INFO][0m   경로: Public Subnet -> Internet Gateway -> Internet
[0;32m[SUCCESS][0m   ✓ 양방향 통신 가능 (인바운드/아웃바운드)
[0;34m[INFO][0m 시나리오 2: Private App 서브넷 -> 인터넷
[0;34m[INFO][0m   경로: Private App Subnet -> NAT Gateway -> Internet Gateway -> Internet
[0;32m[SUCCESS][0m   ✓ 아웃바운드 전용 통신 (보안 정책 준수)
[0;34m[INFO][0m 시나리오 3: Private DB 서브넷 -> 인터넷
[0;34m[INFO][0m   IPv4: 경로 없음 (인터넷 접근 차단)
[0;34m[INFO][0m   IPv6: Private DB Subnet -> Egress-only IGW -> Internet (아웃바운드 전용)
[0;32m[SUCCESS][0m   ✓ 보안 정책 준수 (데이터베이스 격리)
[0;34m[INFO][0m 시나리오 4: VPC 내부 통신
[0;34m[INFO][0m   경로: Subnet A -> VPC Local Route -> Subnet B
[0;32m[SUCCESS][0m   ✓ VPC 내부 모든 서브넷 간 통신 가능
[0;34m[INFO][0m 시나리오 5: ALB -> ECS 서비스 통신
[0;34m[INFO][0m   경로: Public Subnet (ALB) -> Private App Subnet (ECS)
[0;32m[SUCCESS][0m   ✓ 로드 밸런서에서 애플리케이션으로 트래픽 전달 가능
[0;34m[INFO][0m 시나리오 6: ECS -> RDS 통신
[0;34m[INFO][0m   경로: Private App Subnet (ECS) -> Private DB Subnet (RDS)
[0;32m[SUCCESS][0m   ✓ 애플리케이션에서 데이터베이스로 안전한 통신 가능
[0;34m[INFO][0m === AWS Well-Architected Framework 검증 ===
[0;34m[INFO][0m 1. 운영 우수성 (Operational Excellence)
[0;32m[SUCCESS][0m   ✓ 인프라가 코드로 관리됨 (Terraform)
[0;32m[SUCCESS][0m   ✓ 자동화된 검증 스크립트 구현
[0;34m[INFO][0m 2. 보안 (Security)
[0;32m[SUCCESS][0m   ✓ 네트워크 계층 분리 (Public/Private 서브넷)
[0;32m[SUCCESS][0m   ✓ Private DB 서브넷 인터넷 접근 차단
[0;32m[SUCCESS][0m   ✓ NAT Gateway를 통한 제한적 아웃바운드 접근
[0;34m[INFO][0m 3. 안정성 (Reliability)
[0;32m[SUCCESS][0m   ✓ Multi-AZ 배포로 고가용성 확보
[0;32m[SUCCESS][0m   ✓ 각 AZ별 독립적인 NAT Gateway
[0;34m[INFO][0m 4. 성능 효율성 (Performance Efficiency)
[0;32m[SUCCESS][0m   ✓ AZ별 라우팅 테이블로 지연시간 최소화
[0;32m[SUCCESS][0m   ✓ IPv6 지원으로 미래 확장성 확보
[0;34m[INFO][0m 5. 비용 최적화 (Cost Optimization)
[1;33m[WARNING][0m   ⚠ NAT Gateway 비용 모니터링 필요
[0;32m[SUCCESS][0m   ✓ 필요한 만큼의 리소스만 생성
[0;34m[INFO][0m 6. 지속 가능성 (Sustainability)
[0;32m[SUCCESS][0m   ✓ 효율적인 네트워크 설계로 트래픽 최적화
[0;34m[INFO][0m === 검증 결과 요약 ===

[0;36m=== 라우팅 테이블 및 게이트웨이 검증 결과 ===[0m
검증 시간: Sat Oct  4 22:31:08 KST 2025
모드: 모의 테스트 (간단 버전)
로그 파일: /mnt/c/Users/maius/OneDrive/Desktop/모음/aws-migration-project/spring-petclinic-microservices/scripts/terraform-validation/routing-validation-20251004-223107.log

[0;32m✅ 모든 검증 통과[0m
   - VPC 및 서브넷 구성 ✓
   - Internet Gateway 설정 ✓
   - NAT Gateway 설정 ✓
   - 라우팅 테이블 규칙 ✓
   - 서브넷-라우팅테이블 연결 ✓
   - 라우팅 경로 시뮬레이션 ✓
   - Well-Architected Framework ✓
[1;33m⚠️  경고 1개 발견[0m

[0;34m권장사항:[0m
1. 정기적인 라우팅 테이블 검토 및 최적화
2. NAT Gateway 비용 모니터링 및 최적화
3. IPv6 설정 활용도 검토
4. 보안 그룹과 NACL 연계 검증
5. VPC Flow Logs 활성화 고려
6. 네트워크 성능 모니터링 구축

[0;32m다음 단계:[0m
1. 실제 AWS 환경에서 전체 스크립트 실행
2. 보안 그룹 및 NACL 검증 진행
3. 애플리케이션 레이어 검증 준비
